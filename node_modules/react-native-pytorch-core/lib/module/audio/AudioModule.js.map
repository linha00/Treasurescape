{"version":3,"sources":["AudioModule.ts"],"names":["NativeModules","toPlainNativeJSRef","resolveAssetSource","require","PyTorchCoreAudioModule","AudioModule","wrapRef","ref","play","pause","stop","getDuration","release","AudioUtil","isRecording","startRecord","stopRecord","toFile","audio","audioRef","fromFile","filePath","fromBundle","path","source","uri"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,cAA5B;AACA,SAAqBC,kBAArB,QAA8C,gBAA9C;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,iDAAD,CAAlC;;AAEA,MAAM;AAACC,EAAAA,sBAAsB,EAAEC;AAAzB,IAAwCL,aAA9C;AAsCA,OAAO,MAAMM,OAAO,GAAIC,GAAD,KAA8B,EACnD,GAAGA,GADgD;;AAEnDC,EAAAA,IAAI,GAAS;AACX,WAAOH,WAAW,CAACG,IAAZ,CAAiBD,GAAjB,CAAP;AACD,GAJkD;;AAKnDE,EAAAA,KAAK,GAAS;AACZ,WAAOJ,WAAW,CAACI,KAAZ,CAAkBF,GAAlB,CAAP;AACD,GAPkD;;AAQnDG,EAAAA,IAAI,GAAS;AACX,WAAOL,WAAW,CAACK,IAAZ,CAAiBH,GAAjB,CAAP;AACD,GAVkD;;AAWnDI,EAAAA,WAAW,GAAW;AACpB,WAAON,WAAW,CAACM,WAAZ,CAAwBJ,GAAxB,CAAP;AACD,GAbkD;;AAcnD,QAAMK,OAAN,GAA+B;AAC7B,WAAO,MAAMP,WAAW,CAACO,OAAZ,CAAoBL,GAApB,CAAb;AACD;;AAhBkD,CAA9B,CAAhB;AAmBP,OAAO,MAAMM,SAAS,GAAG;AACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,GAAqB;AAC9B,WAAOT,WAAW,CAACS,WAAZ,EAAP;AACD,GAVsB;;AAYvB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,GAAS;AAClBV,IAAAA,WAAW,CAACU,WAAZ;AACD,GArBsB;;AAuBvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,UAAN,GAA0C;AACxC,UAAMT,GAAgB,GAAG,MAAMF,WAAW,CAACW,UAAZ,EAA/B;;AACA,QAAIT,GAAG,IAAI,IAAX,EAAiB;AACf,aAAOD,OAAO,CAACC,GAAD,CAAd;AACD;;AACD,WAAO,IAAP;AACD,GAtCsB;;AAwCvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMU,MAAN,CAAaC,KAAb,EAA4C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,QAAQ,GAAGlB,kBAAkB,CAACiB,KAAD,CAAnC;AACA,WAAO,MAAMb,WAAW,CAACY,MAAZ,CAAmBE,QAAnB,CAAb;AACD,GA3DsB;;AA6DvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,QAAN,CAAeC,QAAf,EAAiD;AAC/C,UAAMd,GAAgB,GAAG,MAAMF,WAAW,CAACe,QAAZ,CAAqBC,QAArB,CAA/B;AACA,WAAOf,OAAO,CAACC,GAAD,CAAd;AACD,GA3EsB;;AA6EvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMe,UAAN,CAAiBC,IAAjB,EAA+C;AAC7C,UAAMC,MAAM,GAAGtB,kBAAkB,CAACqB,IAAD,CAAjC;AACA,UAAMhB,GAAgB,GAAG,MAAMF,WAAW,CAACiB,UAAZ,CAAuBE,MAAM,CAACC,GAA9B,CAA/B;AACA,WAAOnB,OAAO,CAACC,GAAD,CAAd;AACD;;AA/FsB,CAAlB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NativeJSRef, toPlainNativeJSRef} from '../NativeJSRef';\n\nconst resolveAssetSource = require('react-native/Libraries/Image/resolveAssetSource');\n\nconst {PyTorchCoreAudioModule: AudioModule} = NativeModules;\n\nexport interface Audio extends NativeJSRef {\n  /**\n   * Play an audio.\n   */\n  play(): void;\n\n  /**\n   * Pause an audio.\n   */\n  pause(): void;\n\n  /**\n   * Stop the current playing audio.\n   */\n  stop(): void;\n\n  /**\n   * Get the duration of an audio in ms.\n   */\n  getDuration(): number;\n\n  /**\n   * Until explicitly released, an [[Audio]] will have a reference in memory.\n   * Not calling [[Audio.release]] can eventually result in an\n   * `OutOfMemoryException`.\n   *\n   * :::caution\n   *\n   * While this is an `async` function, it does not need to be `await`ed. For\n   * example, the `GC` on Android will eventually free the allocated memory.\n   *\n   * :::\n   */\n  release(): Promise<void>;\n}\n\nexport const wrapRef = (ref: NativeJSRef): Audio => ({\n  ...ref,\n  play(): void {\n    return AudioModule.play(ref);\n  },\n  pause(): void {\n    return AudioModule.pause(ref);\n  },\n  stop(): void {\n    return AudioModule.stop(ref);\n  },\n  getDuration(): number {\n    return AudioModule.getDuration(ref);\n  },\n  async release(): Promise<void> {\n    return await AudioModule.release(ref);\n  },\n});\n\nexport const AudioUtil = {\n  /**\n   * Returns the native state of audio recording.\n   *\n   * ```typescript\n   * const isRecording = await AudioUtil.isRecording();\n   * ```\n   */\n  isRecording(): Promise<boolean> {\n    return AudioModule.isRecording();\n  },\n\n  /**\n   * Records an audio of a specific time duration.\n   *\n   * ```typescript\n   * AudioUtil.startRecord();\n   * ```\n   */\n  startRecord(): void {\n    AudioModule.startRecord();\n  },\n\n  /**\n   * Stops an active audio recording session.\n   *\n   * ```typescript\n   * const audio: Audio = await AudioUtil.stopRecord();\n   * ```\n   *\n   * @returns A promise resolving into an [[Audio]] or null\n   */\n  async stopRecord(): Promise<Audio | null> {\n    const ref: NativeJSRef = await AudioModule.stopRecord();\n    if (ref != null) {\n      return wrapRef(ref);\n    }\n    return null;\n  },\n\n  /**\n   * Saves an audio to a file.\n   *\n   * ```typescript\n   * const path: string = await AudioUtil.toFile(audio);\n   * ```\n   *\n   * @param audio Audio to save.\n   * @returns path Path to the audio file.\n   */\n  async toFile(audio: Audio): Promise<string> {\n    // TODO(T122223365) Temporary solution to make the toFile function work\n    // with either NativeJSRef audio or true native audio.\n    //\n    // Without this reassignment of just the image ID, the bridge will\n    // eventually throw an error because it can't serialize the the native\n    // audio.\n    const audioRef = toPlainNativeJSRef(audio);\n    return await AudioModule.toFile(audioRef);\n  },\n\n  /**\n   * The `fromFile` function loads an [[Audio]] at the filepath (e.g., stored\n   * on the file system).\n   *\n   * ```typescript\n   * const audio: Audio = await AudioUtil.fromFile('/data/0/pytorch/audio.wav');\n   * ```\n   *\n   * @param filePath The file path to the audio.\n   * @returns A promise resolving into an [[Audio]].\n   */\n  async fromFile(filePath: string): Promise<Audio> {\n    const ref: NativeJSRef = await AudioModule.fromFile(filePath);\n    return wrapRef(ref);\n  },\n\n  /**\n   * The `fromBundle` function loads an [[Audio]] that is bundled with the\n   * React Native app bundle. The function param is a `require` with a relative\n   * path (the path is relative to the file that contains the\n   * [[AudioUtil.fromBundle]] call)\n   *\n   * ```typescript\n   * const audioAsset = require('../../assets/audio/audio_file.wav');\n   * const audio: Audio = await AudioUtil.fromBundle(audioAsset);\n   * ```\n   *\n   * @param audioPath The audio path (i.e., a `require`).\n   * @returns A promise resolving into an [[Audio]].\n   */\n  async fromBundle(path: number): Promise<Audio> {\n    const source = resolveAssetSource(path);\n    const ref: NativeJSRef = await AudioModule.fromBundle(source.uri);\n    return wrapRef(ref);\n  },\n};\n"]}