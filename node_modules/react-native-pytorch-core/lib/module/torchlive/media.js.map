{"version":3,"sources":["media.ts"],"names":["media","__torchlive__"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqGA,OAAO,MAAMA,KAAY,GAAGC,aAAa,CAACD,KAAnC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type {Tensor} from 'react-native-pytorch-core';\nimport type {NativeJSRef} from '../NativeJSRef';\nimport type {Image} from '../ImageModule';\n\nexport interface Blob {\n  /**\n   * The Blob interface's size property returns the size of the Blob in bytes.\n   */\n  readonly size: number;\n  /**\n   * A string indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  readonly type: string;\n\n  /**\n   * The `arrayBuffer()` function returns a `Promise` that resolves with the\n   * contents of the blob as binary data contained in an ArrayBuffer.\n   */\n  arrayBuffer(): Promise<Uint8Array>;\n  /**\n   * The `slice() function creates and returns a new [[Blob]] object which contains\n   * data from a subset of the blob on which it's called.\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice}\n   *\n   * ```\n   * slice()\n   * slice(start)\n   * slice(start, end)\n   * ```\n   *\n   * @param start An index into the [[Blob]] indicating the first byte to include\n   * in the new [[Blob]]. If you specify a negative value, it's treated as an offset\n   * from the end of the [[Blob]] toward the beginning. For example, -10 would be\n   * the 10th from last byte in the [[Blob]]. The default value is 0.\n   * If you specify a value for `start` that is larger than the size of the source\n   * [[Blob]], the returned [[Blob]] has size 0 and contains no data.\n   * @param end An index into the [[Blob]] indicating the first byte that will *not*\n   * be included in the new [[Blob]] (i.e. the byte exactly at this index is not\n   * included). If you specify a negative value, it's treated as an offset from\n   * the end of the [[Blob]] toward the beginning. For example, -10 would be the 10th\n   * from last byte in the [[Blob]]. The default value is `size`.\n   * @returns A new [[Blob]] object containing the specified subset of the data contained\n   * within the blob on which this method was called. The original blob is not altered.\n   */\n  slice(start?: number, end?: number): Blob;\n}\n\nexport interface Media {\n  /**\n   *\n   * @deprecated This function will be removed in the next release. Use `imageFromTensor` instead.\n   * ```typescript\n   * const tensor = torch.fromBlob(blob, [imageHeight, imageWidth, channels]);\n   * const image = media.imageFromTensor(tensor);\n   * ```\n   *\n   * Converts a [[Blob]] into an [[Image]]. The blob should be in RGB format.\n   * The width and height input should match the blob size.\n   * i.e. `blob.getDirectSize()` equals `width * height * 3`.\n   *\n   * @param blob [[Blob]] to turn into an [[Image]].\n   * @param width The width of the image.\n   * @param heigth The height of the image.\n   * @returns An [[Image]] object created from the [[Blob]].\n   */\n  imageFromBlob(blob: Blob, width: number, height: number): Image;\n\n  /**\n   * Converts a [[Tensor]] into an [[Image]]. The tensor should be in CHW (channels,\n   * height, width) format, with uint8 type.\n   *\n   * There are some assumptions made about the input tensor:\n   * - If the tensor has 4 channels, it is assumed to be RGBA.\n   * - If the tensor has 3 channels, it is assumed to be RGB.\n   * - If the tensor has 1 channel, it is assumed to be grayscale.\n   *\n   * @param tensor [[Tensor]] to turn into an [[Image]].\n   * @returns An [[Image]] object created from the [[Tensor]].\n   */\n  imageFromTensor(tensor: Tensor): Image;\n\n  /**\n   * Converts a [[Tensor]] or [[NativeJSRef]] into a [[Blob]]. The blob can be\n   * used to create a [[Tensor]] object or convert into a [[NativeJSRef]] like\n   * an image or audio.\n   *\n   * @param obj Object to turn into a [[Blob]].\n   */\n  toBlob(obj: Tensor | NativeJSRef): Blob;\n}\n\ntype Torchlive = {\n  media: Media;\n};\n\ndeclare const __torchlive__: Torchlive;\n\nexport const media: Media = __torchlive__.media;\n"]}