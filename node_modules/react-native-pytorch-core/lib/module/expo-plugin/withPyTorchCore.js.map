{"version":3,"sources":["withPyTorchCore.ts"],"names":["withAppBuildGradle","createRunOncePlugin","pkg","require","withPyTorch","config","_props","innerConfig","modResults","language","contents","setClassPath","_config","buildGradle","mutatedBuildGradle","replace","name","version"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAEEA,kBAFF,EAGEC,mBAHF,QAKO,sBALP,C,CAOA;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AAIA,MAAMC,WAAgC,GAAG,CAACC,MAAD,EAASC,MAAM,GAAG,EAAlB,KAAyB;AAChED,EAAAA,MAAM,GAAGL,kBAAkB,CAACK,MAAD,EAASE,WAAW,IAAI;AACjD,QAAIA,WAAW,CAACC,UAAZ,CAAuBC,QAAvB,KAAoC,QAAxC,EAAkD;AAChDF,MAAAA,WAAW,CAACC,UAAZ,CAAuBE,QAAvB,GAAkCC,YAAY,CAC5CJ,WAD4C,EAE5CA,WAAW,CAACC,UAAZ,CAAuBE,QAFqB,CAA9C;AAID;;AACD,WAAOH,WAAP;AACD,GAR0B,CAA3B;AAUA,SAAOF,MAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASM,YAAT,CACLC,OADK,EAELC,WAFK,EAGL;AACA,MAAIC,kBAAkB,GAAGD,WAAW,CAACE,OAAZ,CACvB,aADuB,EAEtB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtB2B,CAAzB;AAyBAD,EAAAA,kBAAkB,GAAGA,kBAAkB,CAACC,OAAnB,CACnB,kBADmB,EAElB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BuB,CAArB;AA8BA,SAAOD,kBAAP;AACD,C,CAED;;AACA,eAAeb,mBAAmB,EAChC;AACAG,WAFgC,EAGhC;AACAF,GAAG,CAACc,IAJ4B,EAKhC;AACAd,GAAG,CAACe,OAN4B,CAAlC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  ConfigPlugin,\n  withAppBuildGradle,\n  createRunOncePlugin,\n  ExportedConfigWithProps,\n} from '@expo/config-plugins';\n\n// Keeping the name, and version in sync with it's package.\nconst pkg = require('react-native-pytorch-core/package.json');\n\ntype Props = {};\n\nconst withPyTorch: ConfigPlugin<Props> = (config, _props = {}) => {\n  config = withAppBuildGradle(config, innerConfig => {\n    if (innerConfig.modResults.language === 'groovy') {\n      innerConfig.modResults.contents = setClassPath(\n        innerConfig,\n        innerConfig.modResults.contents,\n      );\n    }\n    return innerConfig;\n  });\n\n  return config;\n};\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(\n  _config: Pick<ExportedConfigWithProps, 'android'>,\n  buildGradle: string,\n) {\n  let mutatedBuildGradle = buildGradle.replace(\n    /android\\s?{/,\n    `android {\n    /**\n     * Without the packaging options, it will result in the following build error:\n     *\n     * * What went wrong:\n     * Execution failed for task ':app:mergeDebugNativeLibs'.\n     * > A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\n     *    > More than one file was found with OS independent path 'lib/x86/libfbjni.so'\n     */\n    packagingOptions {\n        pickFirst '**/*.so'\n    }\n    sourceSets {\n        main {\n            jniLibs.srcDirs += [\"$buildDir/extra-jniLibs/jni\"]\n        }\n    }\n    configurations {\n        extraJNILibs\n    }\n`,\n  );\n\n  mutatedBuildGradle = mutatedBuildGradle.replace(\n    /dependencies\\s?{/,\n    `\n// Extract JNI shared libraries as project libraries. This assumes the target directory, $buildDir/extra-jniLibs, is added to the jniLibs.srcDirs configuration.\ntask extraJNILibs {\n  doLast {\n    configurations.extraJNILibs.files.each {\n      def file = it.absoluteFile\n\n      copy {\n        from zipTree(file)\n        into \"$buildDir/extra-jniLibs\" // temp location instead of \"src/main/jniLibs\"\n        include \"jni/**/*\"\n      }\n    }\n  }\n}\n\ntasks.whenTaskAdded { task ->\n  if (task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders') {\n    task.dependsOn(extraJNILibs)\n  }\n}\n\ndependencies {\n    // Used to control the version of libfbjni.so packaged into the APK\n    extraJNILibs(\"com.facebook.fbjni:fbjni:0.2.2\")\n`,\n  );\n\n  return mutatedBuildGradle;\n}\n\n// A helper method that wraps `withRunOnce` and appends items to `pluginHistory`.\nexport default createRunOncePlugin(\n  // The plugin to guard.\n  withPyTorch,\n  // An identifier used to track if the plugin has already been run.\n  pkg.name,\n  // Optional version property, if omitted, defaults to UNVERSIONED.\n  pkg.version,\n);\n"]}