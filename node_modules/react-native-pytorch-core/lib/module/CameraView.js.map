{"version":3,"sources":["CameraView.tsx"],"names":["React","findNodeHandle","requireNativeComponent","UIManager","wrapRef","CameraFacing","nativeCameraViewName","PyTorchCoreCameraView","Camera","PureComponent","constructor","props","event","onCapture","nativeEvent","ID","ref","image","onFrame","cameraRef","createRef","takePicture","current","takePictureCommandId","getViewManagerConfig","Commands","cameraViewHandle","dispatchViewManagerCommand","flip","flipCommandId","render","facing","hideCaptureButton","hideFlipButton","targetResolution","otherProps","handleOnCapture","handleOnFrame","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as React from 'react';\nimport {\n  findNodeHandle,\n  requireNativeComponent,\n  UIManager,\n  ViewProps,\n} from 'react-native';\nimport {Image, wrapRef} from './ImageModule';\nimport type {NativeJSRef} from './NativeJSRef';\n\n/**\n * Camera target resolution. It is not guaranteed that the camera runs at the\n * set target resolution, and it might pick the closest available resolution.\n *\n * {@see https://developer.android.com/reference/androidx/camera/core/ImageAnalysis.Builder#setTargetResolution(android.util.Size)}\n */\ninterface TargetResolution {\n  /**\n   * Camera resolution width in pixels.\n   */\n  width: number;\n\n  /**\n   * Camera resolution height in pixels.\n   */\n  height: number;\n}\n\n/**\n * Direction the camera faces relative to the device's screen.\n */\nexport enum CameraFacing {\n  /**\n   * Camera facing the opposite direction as the device's screen.\n   */\n  BACK = 'back',\n\n  /**\n   * Camera facing the same direction as the device's screen.\n   */\n  FRONT = 'front',\n}\n\n/**\n * Properties for the camera.\n *\n * ```typescript\n * <Camera\n *   onFrame={(image: Image) => {\n *     image.release();\n *   }}\n *   hideCaptureButton={true}\n * />\n * ```\n */\nexport interface CameraProps extends ViewProps {\n  /**\n   * Hides the capture button if set to `true`, otherwise the camera will show\n   * a capture button.\n   */\n  hideCaptureButton?: boolean;\n\n  /**\n   * Hides the flip button if set to `true`, otherwise the camera will show\n   * a flip button.\n   */\n  hideFlipButton?: boolean;\n\n  /**\n   * Camera target resolution. It is not guaranteed that the camera runs at the\n   * set target resolution, and it might pick the closest available resolution.\n   *\n   * {@see https://developer.android.com/reference/androidx/camera/core/ImageAnalysis.Builder#setTargetResolution(android.util.Size)}\n   */\n  targetResolution?: TargetResolution;\n\n  /**\n   * Direction the camera faces relative to the device's screen.\n   */\n  facing?: CameraFacing;\n\n  /**\n   * Callback with an [[Image]] after capture button was pressed.\n   *\n   * @param image An [[Image]] reference.\n   */\n  onCapture?(image: Image): void;\n\n  /**\n   * Callback when the camera delivers an [[Image]].\n   *\n   * :::caution\n   *\n   * Needs to call [[Image.release]] to receive the next frame. The camera\n   * preview will continue to render updates, but new [[Image]] frames will be\n   * omitted until [[Image.release]] is called.\n   *\n   * :::\n   *\n   * @param image An [[Image]] reference.\n   */\n  onFrame?(image: Image): void;\n}\n\nconst nativeCameraViewName = 'PyTorchCoreCameraView';\n\nconst PyTorchCoreCameraView =\n  requireNativeComponent<CameraProps>(nativeCameraViewName);\n\n/**\n * A camera component with [[CameraProps.onCapture]] and [[CameraProps.onFrame]] callbacks.\n * To programmatically trigger a capture, call the [[takePicture]] function.\n *\n * ```typescript\n * export default function App() {\n *   const {imageClass, processImage} = useImageClassification(\n *     require('./resnet18.ptl'),\n *   );\n *\n *   const handleFrame = useCallback(\n *     async (image: Image) => {\n *       await processImage(image);\n *       image.release();\n *     },\n *     [processImage],\n *   );\n *\n *   return (\n *     <>\n *       <Camera\n *         style={styles.camera}\n *         onFrame={handleFrame}\n *         hideCaptureButton={true}\n *       />\n *       <Text>{imageClass}</Text>\n *     </>\n *   );\n * }\n * ```\n *\n * @component\n */\nexport class Camera extends React.PureComponent<CameraProps> {\n  private cameraRef: React.RefObject<any>;\n\n  /** @internal */\n  constructor(props: CameraProps) {\n    super(props);\n    this.cameraRef = React.createRef();\n  }\n\n  /**\n   * The [[takePicture]] function captures an image from the camera and then\n   * trigger the [[onCapture]] callback registered on the [[Camera]]\n   * component.\n   *\n   * ```typescript\n   * export default function CameraTakePicture() {\n   *   const cameraRef = React.useRef<Camera>(null);\n   *\n   *   async function handleCapture(image: Image) {\n   *     // Use captured image before releasing it.\n   *     image.release();\n   *   }\n   *\n   *   function handleTakePicture() {\n   *     const camera = cameraRef.current;\n   *     if (camera != null) {\n   *       camera.takePicture();\n   *     }\n   *   }\n   *\n   *   return (\n   *     <>\n   *       <Camera\n   *         ref={cameraRef}\n   *         onCapture={handleCapture}\n   *         hideCaptureButton={true}\n   *         style={StyleSheet.absoluteFill}\n   *         targetResolution={{width: 480, height: 640}}\n   *         facing={CameraFacing.BACK}\n   *       />\n   *       <Button title=\"Take Picture\" onPress={handleTakePicture} />\n   *     </>\n   *   );\n   * }\n   * ```\n   */\n  public takePicture(): void {\n    if (this.cameraRef.current) {\n      const takePictureCommandId =\n        UIManager.getViewManagerConfig(nativeCameraViewName).Commands\n          .takePicture;\n      const cameraViewHandle = findNodeHandle(this.cameraRef.current);\n      UIManager.dispatchViewManagerCommand(\n        cameraViewHandle,\n        takePictureCommandId,\n        [],\n      );\n    }\n  }\n\n  public flip(): void {\n    if (this.cameraRef.current) {\n      const flipCommandId =\n        UIManager.getViewManagerConfig(nativeCameraViewName).Commands.flip;\n      const cameraViewHandle = findNodeHandle(this.cameraRef.current);\n      UIManager.dispatchViewManagerCommand(cameraViewHandle, flipCommandId, []);\n    }\n  }\n\n  private handleOnCapture = (event: any): void => {\n    const {onCapture} = this.props;\n    const {nativeEvent} = event;\n    const {ID} = nativeEvent;\n    const ref: NativeJSRef = {ID};\n    const image = wrapRef(ref);\n    onCapture != null && onCapture(image);\n  };\n\n  private handleOnFrame = (event: any): void => {\n    const {onFrame} = this.props;\n    const {nativeEvent} = event;\n    const {ID} = nativeEvent;\n    const ref: NativeJSRef = {ID};\n    const image = wrapRef(ref);\n    onFrame != null && onFrame(image);\n  };\n\n  /** @internal */\n  public render(): React.ReactNode {\n    const {\n      facing,\n      hideCaptureButton,\n      hideFlipButton,\n      onFrame,\n      targetResolution,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <PyTorchCoreCameraView\n        {...otherProps}\n        facing={facing}\n        hideCaptureButton={hideCaptureButton}\n        hideFlipButton={hideFlipButton}\n        onCapture={this.handleOnCapture}\n        onFrame={onFrame != null ? this.handleOnFrame : undefined}\n        ref={this.cameraRef}\n        targetResolution={targetResolution}\n      />\n    );\n  }\n}\n"]}