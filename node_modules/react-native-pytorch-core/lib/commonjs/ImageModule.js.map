{"version":3,"sources":["ImageModule.ts"],"names":["resolveAssetSource","RNImage","PyTorchCoreImageModule","ImageModule","NativeModules","wrapRef","ref","getWidth","getHeight","getNaturalWidth","getNaturalHeight","getPixelDensity","scale","sx","sy","scaledRef","release","IMAGE_PATH_CACHE","getImageAssetSource","imagePath","source","ImageUtil","fromBundle","fromFile","path","fromImageData","imageData","imageDataRef","ID","fromJSRef","imageRef","fromURL","url","image","toFile"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  Image as RNImage,\n  ImageRequireSource,\n  ImageResolvedAssetSource,\n  NativeModules,\n} from 'react-native';\nimport type {ImageData} from './CanvasView';\nimport {NativeJSRef, toPlainNativeJSRef} from './NativeJSRef';\n\nconst {resolveAssetSource} = RNImage;\n\nconst {PyTorchCoreImageModule: ImageModule} = NativeModules;\n\n/**\n * An [[Image]] object in JavaScript is a reference to a native image object\n * wrapped in [[NativeJSRef]]. The image data is not transferred over the React\n * Native Bridge, but it offers functions to manipulate the image. All\n * functions are executed `async` in native.\n *\n * :::info\n *\n * Eventually, this will change with the introduction of the new React Native\n * architecture including JSI, Fabric, and TurboModules.\n *\n * :::\n */\nexport interface Image extends NativeJSRef {\n  /**\n   * Get the height of an image (in pixel).\n   */\n  getHeight(): number;\n\n  /**\n   * Get the width of an image (in pixel).\n   */\n  getWidth(): number;\n\n  /**\n   * Get the natural height of an image (in pixel).\n   */\n  getNaturalHeight(): number;\n\n  /**\n   * Get the natural width of an image (in pixel).\n   */\n  getNaturalWidth(): number;\n\n  /**\n   * Get the pixel density for this image. The `width` and `height` multiplied\n   * by the `pixelDensity` is `naturalWidth` and `naturalHeight`.\n   */\n  getPixelDensity(): number;\n\n  /**\n   * Until explicitly released, an [[Image]] will have a reference in memory.\n   * Not calling [[Image.release]] can eventually result in an\n   * `OutOfMemoryException`.\n   *\n   * :::caution\n   *\n   * While this is an `async` function, it does not need to be `await`ed. For\n   * example, the `GC` on Android will eventually free the allocated memory.\n   *\n   * :::\n   */\n  release(): Promise<void>;\n\n  /**\n   * The [[Image.scale]] method of the [[Image]] API adds a scaling\n   * transformation horizontally and/or vertically. For instance, a scaling\n   * factor of `0.5` results in a unit size of `0.5` pixels; the image is thus\n   * at half the normal size. Similarly, a scaling factor of `2.0` increases\n   * the unit size so that one unit becomes two pixels; images are thus at\n   * twice the normal size.\n   *\n   * The method will apply the scaling on a copy of the [[Image]] and return\n   * the scaled [[Image]] asynchronously.\n   *\n   * @param sx Scaling factor in the horizontal direction. A negative value flips pixels across the vertical axis. A value of `1` results in no horizontal scaling.\n   * @param sy Scaling factor in the vertical direction. A negative value flips pixels across the horizontal axis. A value of `1` results in no vertical scaling.\n   */\n  scale(sx: number, sy: number): Promise<Image>;\n}\n\nexport const wrapRef = (ref: NativeJSRef): Image => ({\n  ...ref,\n  getWidth(): number {\n    return ImageModule.getWidth(ref);\n  },\n  getHeight(): number {\n    return ImageModule.getHeight(ref);\n  },\n  getNaturalWidth(): number {\n    return ImageModule.getNaturalWidth(ref);\n  },\n  getNaturalHeight(): number {\n    return ImageModule.getNaturalHeight(ref);\n  },\n  getPixelDensity(): number {\n    return ImageModule.getPixelDensity(ref);\n  },\n  async scale(sx: number, sy: number): Promise<Image> {\n    const scaledRef = await ImageModule.scale(ref, sx, sy);\n    return wrapRef(scaledRef);\n  },\n  async release(): Promise<void> {\n    return await ImageModule.release(ref);\n  },\n});\n\nconst IMAGE_PATH_CACHE: {[key: number]: ImageResolvedAssetSource} = {};\n\nconst getImageAssetSource = (\n  imagePath: ImageRequireSource,\n): ImageResolvedAssetSource => {\n  let source = IMAGE_PATH_CACHE[imagePath];\n  if (source == null) {\n    source = resolveAssetSource(imagePath);\n    IMAGE_PATH_CACHE[imagePath] = source;\n  }\n  return source;\n};\n\n/**\n * The [[ImageUtil]] object provides functions to load an [[Image]] either from\n * a URL or load an image that is bundled with the React Native app bundle. The\n * returned Image object can the then be used to run model inference or it can\n * be drawn on a canvas.\n */\nexport const ImageUtil = {\n  /**\n   * The `fromBundle` function loads an [[Image]] that is bundled with the\n   * React Native app bundle. The function param is a `require` with a relative\n   * path (the path is relative to the file that contains the\n   * [[ImageUtils.fromBundle]] call). Be aware that the\n   * [[ImageUtils.fromBundle]] function is an `async` function and needs to be\n   * `await`ed to access the loaded image.\n   *\n   * @param imagePath The image path (i.e., a `require`).\n   * @returns A promise resolving into an [[Image]].\n   */\n  async fromBundle(imagePath: ImageRequireSource): Promise<Image> {\n    const source = getImageAssetSource(imagePath);\n    const ref: NativeJSRef = await ImageModule.fromBundle(source);\n    return wrapRef(ref);\n  },\n\n  /**\n   * The `fromFile` function loads an [[Image]] at the filepath (e.g., stored\n   * on the file system).\n   *\n   * ```typescript\n   * const image: Image = await ImageUtils.fromFile('/data/0/pytorch/image.png');\n   * ```\n   *\n   * @param path The file path to the image.\n   * @returns A promise resolving into an [[Image]].\n   */\n  async fromFile(path: string): Promise<Image> {\n    const ref: NativeJSRef = await ImageModule.fromFile(path);\n    return wrapRef(ref);\n  },\n\n  /**\n   * Transforms an [[ImageData]] into an [[Image]] object.\n   *\n   * @param imageData The ImageData that will be transformed into an [[Image]].\n   * @returns A promise resolving into an [[Image]].\n   */\n  async fromImageData(imageData: ImageData): Promise<Image> {\n    // Only send NativeJSRef ID to native and omit other fields\n    const imageDataRef: NativeJSRef = {ID: imageData.ID};\n    const ref: NativeJSRef = await ImageModule.fromImageData(\n      imageDataRef,\n      true,\n    );\n    return wrapRef(ref);\n  },\n\n  /**\n   * The `fromJSRef` function returns an [[Image]] by wrapping a [[NativeJSRef]]\n   * object.\n   *\n   * Example of a [[NativeJSRef]] for a non-serializable object like an image:\n   *\n   * ```javascript\n   * {ID:\"5AD79901-C651-4994-9C99-23B23216B8F4\"}\n   * ```\n   *\n   * ```typescript\n   * const wrappedImage: Image = await ImageUtil.fromJSRef(imageRef);\n   * // do something with wrappedImage\n   * wrappedImage.release();\n   * ```\n   *\n   * @param imageRef The Native JS Object Reference ID of the image.\n   * @returns an [[Image]].\n   **/\n  fromJSRef(imageRef: NativeJSRef): Image {\n    return wrapRef(imageRef);\n  },\n\n  /**\n   * The `fromURL` function loads an [[Image]] from a URL. Be aware that the\n   * `fromURL` function is an `async` function and needs to be `await`ed to\n   * access the loaded image.\n   *\n   * ```typescript\n   * const image: Image = await ImageUtils.fromURL('https://image.url');\n   * ```\n   *\n   * @param url The image url.\n   * @returns A promise resolving into an [[Image]].\n   */\n  async fromURL(url: string): Promise<Image> {\n    const ref: NativeJSRef = await ImageModule.fromURL(url);\n    return wrapRef(ref);\n  },\n\n  /**\n   * Releases am image and ultimately frees memory.\n   *\n   * @param image Image that will be released.\n   */\n  async release(image: Image): Promise<void> {\n    return await ImageModule.release(image);\n  },\n\n  /**\n   * Saves an image to a file.\n   *\n   * ```typescript\n   * const path: string = ImageUtils.toFile(image);\n   * ```\n   *\n   * @param image Image to save.\n   * @returns path Path to image file.\n   */\n  async toFile(image: Image): Promise<string> {\n    // TODO(T122223365) Temporary solution to make the toFile function work\n    // with either NativeJSRef images or true native images (see IImage.h).\n    //\n    // Without this reassignment of just the image ID, the bridge will\n    // eventually throw an error because it can't serialize the the native\n    // image.\n    //\n    // {@link https://github.com/pytorch/live/blob/main/react-native-pytorch-core/cxx/src/torchlive/media/image/IImage.h#L15}\n    const imageRef = toPlainNativeJSRef(image);\n    return await ImageModule.toFile(imageRef);\n  },\n};\n"]}