{"version":3,"sources":["NativeJSRef.ts"],"names":["toPlainNativeJSRef","ref","ID"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CAA4BC,GAA5B,EAA2D;AAChE,SAAO;AACLC,IAAAA,EAAE,EAAED,GAAG,CAACC;AADH,GAAP;AAGD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n/**\n * @packageDocumentation\n *\n * The [[NativeJSRef]] is an interface for large native objects or objects that\n * cannot be serialized. Instead of serializing an object and sending it over\n * the React Native Bridge, an object will be assigned ID on native and this ID\n * will be sent over the React Native Bridge instead. The ID will be used to\n * reference the native object when calling function on the object in\n * JavaScript.\n *\n * ```typescript\n * const {PingPongModule} = NativeModules;\n *\n * interface PingPongMessage {\n *   ping(name: string): Promise<string>;\n * }\n *\n * const wrapRef = (ref: NativeJSRef): PingPongMessage => {\n *   return {\n *     async ping(name: string): Promise<string> {\n *       return await PingPongModule.ping(ref, name);\n *     }\n *   };\n * };\n *\n * interface PingPongProps extends ViewProps {\n *   onMessage(message: PingPongMessage): void;\n * }\n *\n * const PingPongView = requireNativeComponent<PingPongProps>('PingPongView');\n *\n * export function PingPong({onMessage, ...otherProps}: PingPongProps) {\n *   const handleMessage = useCallback(\n *     (event: any) => {\n *       const {nativeEvent} = event;\n *       const {ID} = nativeEvent;\n *       const ref: NativeJSRef = {ID};\n *       const message = wrapRef(ref);\n *       onMessage(message);\n *     },\n *     [onMessage],\n *   );\n *   return <PingPongView {...otherProps} onMessage={handleMessage} />;\n * }\n * ```\n */\nexport interface NativeJSRef {\n  /**\n   * The internal ID for the object instance in native. Instead of serializing\n   * the object in native and sending it via the React Native Bridge, each\n   * native object will be assigned an ID which is sent to JavaScript instead.\n   * The ID will be used to reference the native object instance when calling\n   * functions on the JavaScript object.\n   */\n  ID: string;\n}\n\n/**\n * TODO(T122223365) Temporary solution to make new JSI-based native media\n * objects work with the old React Native architecture. For example, the\n * drawImage of the canvas expects a NativeJSRef, which itself only needs to\n * have an ID property with a UUID that resolves to an object on the native\n * side.\n *\n * The new JSI-based native media objects have this ID too to make them\n * compatible with current approach of sending objects between native and\n * the JS thread. However, a JSI-based native media object might have other\n * properties and functions that aren't serializable by the bridge.\n *\n * This helper function only selects the ID property of the ref, which\n * guarantees that the resulting NativeJSRef object is serializable.\n *\n * This function can be removed once all callsites have been migrated to use\n * the new React Native architecture.\n *\n * @param ref A NativeJSRef or a native media object.\n * @returns A Plain NativeJSRef object with only the ID property.\n */\nexport function toPlainNativeJSRef(ref: NativeJSRef): NativeJSRef {\n  return {\n    ID: ref.ID,\n  };\n}\n"]}